use.miden::account
use.miden::tx
use.multisig_verifier

# CONSTANTS
const.PUBLIC_NOTE=1

#! Adds the provided asset to the current account.
#!
#! Inputs:  [ASSET, pad(12)]
#! Outputs: [pad(16)]
#!
#! Where:
#! - ASSET is the asset to be received, can be fungible or non-fungible
#!
#! Panics if:
#! - the same non-fungible asset already exists in the account.
#! - adding a fungible asset would result in amount overflow, i.e.,
#!   the total amount would be greater than 2^63.
#!
#! Invocation: call
export.receive_asset
    # Verify multisig signatures first
    exec.multisig_verifier::verify_multisig_signatures
    # => [ASSET, pad(12)]
    
    exec.account::add_asset
    # => [ASSET', pad(12)]

    # drop the final asset
    dropw
    # => [pad(16)]
end

#! Creates a new note.
#!
#! The created note will not have any assets attached to it. To add assets to this note use the
#! `move_asset_to_note` procedure.
#!
#! This procedure is expected to be invoked using a `call` instruction. It makes no guarantees about
#! the contents of the `PAD` elements shown below. It is the caller's responsibility to make sure
#! these elements do not contain any meaningful data.
#!
#! Inputs:  [tag, aux, note_type, execution_hint, RECIPIENT, pad(8)]
#! Outputs: [note_idx, pad(15)]
#!
#! Where:
#! - tag is the tag to be included in the note.
#! - aux is the auxiliary data to be included in the note.
#! - note_type is the note's storage type
#! - execution_hint is the note's execution hint
#! - RECIPIENT is the recipient of the note, i.e.,
#!   hash(hash(hash(serial_num, [0; 4]), script_root), input_commitment)
#!
#! Invocation: call
export.create_note
    # Verify multisig signatures first
    exec.multisig_verifier::verify_multisig_signatures
    # => [tag, aux, note_type, execution_hint, RECIPIENT, pad(8)]
    
    exec.tx::create_note
    # => [note_idx, pad(15) ...]
end

#! Removes the specified asset from the account and adds it to the output note with the specified
#! index.
#!
#! This procedure is expected to be invoked using a `call` instruction. It makes no guarantees about
#! the contents of the `PAD` elements shown below. It is the caller's responsibility to make sure
#! these elements do not contain any meaningful data.
#!
#! Inputs:  [ASSET, note_idx, pad(11)]
#! Outputs: [ASSET, note_idx, pad(11)]
#!
#! Where:
#! - note_idx is the index of the output note.
#! - ASSET is the fungible or non-fungible asset of interest.
#!
#! Panics if:
#! - the fungible asset is not found in the vault.
#! - the amount of the fungible asset in the vault is less than the amount to be removed.
#! - the non-fungible asset is not found in the vault.
#!
#! Invocation: call
export.move_asset_to_note
    # Verify multisig signatures first
    exec.multisig_verifier::verify_multisig_signatures
    # => [ASSET, note_idx, pad(11)]
    
    # remove the asset from the account
    exec.account::remove_asset
    # => [ASSET, note_idx, pad(11)]

    exec.tx::add_asset_to_note
    # => [ASSET, note_idx, pad(11) ...]
end

#! Returns the balance of a fungible asset associated with a faucet_id.
#! 
#! Inputs: [faucet_id]
#! Outputs: [balance]
#!
#! Where:
#! - faucet_id is the faucet id of the fungible asset of interest.
#! - balance is the balance of the fungible asset.
export.get_balance
    # Verify multisig signatures first
    exec.multisig_verifier::verify_multisig_signatures
    # => [faucet_id]
    
    exec.account::get_balance
    # => [balance]
end

#! Authenticates a transaction by verifying multisig signatures and then increments the account nonce.
#!
#! Inputs: []
#! Outputs: []
export.auth_tx_multisig
    # Verify multisig signatures (this also increments nonce internally)
    exec.multisig_verifier::verify_multisig_signatures
    # => []
end
