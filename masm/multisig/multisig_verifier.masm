use.miden::account
use.miden::tx
use.std::crypto::dsa::rpo_falcon512
use.std::sys

# CONSTANTS
const.NUMBER_PUBKEYS_INDEX=1
const.THRESHOLD_INDEX=2
const.PUBKEY_MAP_INDEX=3

# Runtime Memory Addresses
const.LOOP_ITER=100
const.VALID_SIGS_COUNT=104
const.MESSAGE=108

# ERRORS
const.INSUFFICIENT_SIGNATURES=3333

# Main multisig verification procedure
# => [] -> []
export.verify_multisig_signatures
    # Get the number of public keys from storage first
    push.NUMBER_PUBKEYS_INDEX
    exec.account::get_item
    # => [NUMBER_PUBKEYS_WORD]
    
    # Extract the actual number (assuming it's stored in the first element)
    drop drop drop
    # => [number_of_pubkeys]
    
    # Store number of signatures to check
    mem_store.LOOP_ITER
    # => []
    
    # Initialize valid signature counter
    push.0
    mem_store.VALID_SIGS_COUNT
    # => []
    
    # Create verification message from transaction commitments
    exec.tx::get_output_notes_commitment
    # => [OUTPUT_NOTES_COMMITMENT]
    
    exec.tx::get_input_notes_commitment
    # => [INPUT_NOTES_COMMITMENT, OUTPUT_NOTES_COMMITMENT]
    
    # Get current nonce and account ID
    exec.account::get_nonce push.0.0.0
    # => [0, 0, 0, nonce, INPUT_NOTES_COMMITMENT, OUTPUT_NOTES_COMMITMENT]
    
    exec.account::get_id push.0.0
    # => [0, 0, account_id_prefix, account_id_suffix, 0, 0, 0, nonce, INPUT_NOTES_COMMITMENT, OUTPUT_NOTES_COMMITMENT]
    
    # Compute the message to be signed
    hmerge hmerge hmerge
    # => [MESSAGE]
    
    # Store the message for verification
    mem_storew.MESSAGE
    # => []
    
    # Initialize loop counter
    push.0
    # => [iteration]
    
    # Check if we should enter the loop
    dup.0
    mem_load.LOOP_ITER
    # => [max_iterations, iteration, iteration]
    
    lt
    # => [should_continue, iteration]
    
    # Main verification loop
    while.true
        # => [iteration]
        
        # Get signature from advice map using iteration as key
        dup.0 push.0.0.0
        # => [KEY (iteration, 0, 0, 0), iteration]
        
        adv.push_mapval
        # => [SIGNATURE_DATA, iteration]
        
        # Check if signature is zero (no signature provided)
        dupw
        push.0.0.0.0
        # => [ZERO, SIGNATURE_DATA, SIGNATURE_DATA, iteration]
        
        eqw
        # => [is_zero, SIGNATURE_DATA, iteration]
        
        if.true
            # No signature for this key, skip
            dropw
            # => [iteration]
        else
            # We have a signature, verify it
            # => [SIGNATURE_DATA, iteration]
            
            # Get corresponding public key from storage map
            dup.4
            # => [iteration, SIGNATURE_DATA, iteration]
            
            push.PUBKEY_MAP_INDEX
            # => [PUBKEY_MAP_INDEX, iteration, SIGNATURE_DATA, iteration]
            
            exec.account::get_map_item
            # => [PK, SIGNATURE_DATA, iteration]
            
            # Load the message for verification
            mem_loadw.MESSAGE
            # => [MESSAGE, PK, SIGNATURE_DATA, iteration]
            
            # Prepare signature for verification
            movup.8 movup.8 movup.8 movup.8
            # => [SIGNATURE_DATA, MESSAGE, PK, iteration]
            
            # Push signature back to advice stack for verification
            adv_push.4
            # => [MESSAGE, PK, iteration]
            
            # Verify signature using rpo_falcon512
            exec.rpo_falcon512::verify
            # => [iteration]
            
            # Increment valid signature counter
            mem_load.VALID_SIGS_COUNT
            push.1 add
            mem_store.VALID_SIGS_COUNT
            # => [iteration]
        end
        
        # Increment iteration counter
        push.1 add
        # => [iteration+1]
        
        # Check if we should continue the loop
        dup.0
        mem_load.LOOP_ITER
        # => [max_iterations, iteration+1, iteration+1]
        
        lt
        # => [should_continue, iteration+1]
        
        # Continue loop if should_continue is true, otherwise exit
    end
    
    # Clean up the stack
    drop
    # => []
    
    # Check if we have enough valid signatures
    mem_load.VALID_SIGS_COUNT
    # => [valid_sig_count]
    
    push.THRESHOLD_INDEX
    exec.account::get_item
    # => [THRESHOLD, valid_sig_count]
    
    # Drop the upper 3 elements of threshold
    drop drop drop
    # => [threshold, valid_sig_count]
    
    # Check if valid signatures >= threshold
    dup.1 dup.1
    # => [threshold, valid_sig_count, threshold, valid_sig_count]
    
    gte
    # => [valid_sig_count >= threshold, threshold, valid_sig_count]
    
    assert.err=INSUFFICIENT_SIGNATURES
    # => [threshold, valid_sig_count]
    
    drop drop
    # => []
    
    exec.sys::truncate_stack
    # => []
end
